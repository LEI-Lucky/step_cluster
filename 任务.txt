好，现在完成了数据的读取，接下来你帮我完成一个聚类的任务：

目录结构：
-- step_cluster
	-- data
	-- save_file
	-- data_loader.py
	-- main.py
	-- evaluation.py
	-- metrics.py
	-- modules.py
	-- pre_train.py
	-- utils.py

目录说明：
data/: 存放数据集。
save_file/: 存放每次迭代的模型权重、指标等信息，第一阶段的最终权重也需要存入此目录，供第二阶段训练使用。


各 Python 文件职责：
main.py：
负责整个聚类流程的执行。
处理设备选择、随机数定义、数据加载、模型训练、评估等核心逻辑。
使用 tqdm 可视化训练过程。

data_loader.py（已经完成）：
负责数据集的读取与预处理。
提供统一的数据加载接口，供 main.py 和其他模块调用。

evaluation.py：
调用metrics中的指标计算、评估聚类模型的性能。
计算模型的聚类质量指标。
可视化聚类结果（如 t-SNE 降维可视化）。

metrics.py：
定义具体的指标计算方法，如调整兰德指数（ARI）、互信息（NMI）、轮廓系数等。
供 evaluation.py 调用。

modules.py：
定义聚类相关的模型使用autoencoder，encoder、decoder都是使用三层MLP结构。
负责模型的初始化、训练及保存。

pre_train.py：
预训练模型的脚本，如用于深度学习的特征提取器。
训练自监督学习模型（如 Autoencoder），以提供更好的特征表示。loss使用重构损失。
训练完成后，模型权重存入 save_file/。

utils.py：
工具函数集合，如数据预处理、可视化、日志管理等。
可能包含 I/O 操作，如加载和存储模型、结果等。

额外优化建议：
日志管理: 在 utils.py 中加入 logging 机制，统一日志输出，方便调试。
配置文件: 使用 config.yaml 或 json 配置文件存储参数，使超参数调整更加灵活。
实验记录: 记录实验配置和结果，便于复现最佳模型。


1.项目结构：
-- step_cluster
    |-- data/
    |-- save_file/
    |-- experiments/          # 新增：存储不同实验配置和结果
    |-- configs/              # 新增：配置文件目录
    |   |-- config.yaml      # 集中管理所有超参数
    |-- logs/                # 新增：日志存储目录
    |-- src/                 # 新增：源代码目录
        |-- data_loader.py   # 已完成
        |-- main.py
        |-- train.py        # 新增：训练逻辑
        |-- evaluation.py
        |-- metrics.py
        |-- modules.py
        |-- pre_train.py
        |-- utils.py

2. 配置文件开发（config.yaml）
[ ] 模型配置（编码器/解码器结构，隐层维度）
[ ] 训练参数（学习率，批次大小，训练轮数）
[ ] 数据处理参数
[ ] 随机种子设置
[ ] 文件路径配置
[ ] 日志配置
3. 核心功能开发
modules.py
[ ] 实现AutoEncoder基础结构
[ ] 添加ClusteringLayer
[ ] 实现模型保存和加载功能
[ ] 添加模型检查点机制
train.py（新增）
[ ] 实现训练循环
[ ] 添加早停机制
[ ] 实现断点续训功能
[ ] 训练过程可视化（使用tqdm）
evaluation.py
[ ] 实现基础评估指标计算
[ ] t-SNE可视化
[ ] 聚类中心可视化
[ ] 损失函数曲线绘制
[ ] 聚类指标变化曲线
[ ] 混淆矩阵分析（如有真实标签）
metrics.py
[ ] 实现ARI（调整兰德指数）
[ ] 实现NMI（归一化互信息）
[ ] 实现轮廓系数
[ ] 其他相关聚类指标
utils.py
[ ] 实现日志类
训练配置记录
训练损失记录
评估指标记录
异常信息记录
[ ] 实现模型权重保存/加载
[ ] 实现实验结果保存
[ ] 异常处理机制
pre_train.py
[ ] 实现自编码器预训练
[ ] 添加重构损失
[ ] 模型权重保存机制
[ ] 训练过程可视化（使用tqdm）
main.py
[ ] 参数解析
[ ] 设备选择
[ ] 随机种子设置
[ ] 训练流程编排
[ ] 结果可视化调用
4. 实验管理
[ ] 设计实验记录格式
[ ] 实现实验结果对比分析
[ ] 实验配置版本控制
5. 性能优化
[ ] 内存使用优化
[ ] 训练速度优化
[ ] GPU利用率优化
6. 文档编写
[ ] README文档
[ ] 配置文件说明
[ ] API文档
[ ] 使用示例
